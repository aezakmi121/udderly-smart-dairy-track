import jsPDF from 'jspdf';
import autoTable from 'jspdf-autotable';
import { format } from 'date-fns';
import { ensurePdfFont, getTableFont } from './fonts';

export interface PdfData {
  fromDate: string;
  toDate: string;
  reportType: 'accrual' | 'cashflow';
  totalExpenses: number;
  averagePerMonth: number;
  recordsCount: number;
  categoryBreakdown: Array<{ name: string; amount: number; percentage: number }>;
  monthlyTrends: Array<{ month: string; amount: number }>;
  paymentMethods: Array<{ name: string; amount: number }>;
  sourceBreakdown: Array<{
    name: string;
    amount: number;
    count: number;
    categories: Array<{ name: string; amount: number; count: number }>;
  }>;
  transactions: Array<{
    date: string;
    amount: number;
    category: string;
    source: string;
    paymentMethod: string;
    vendor: string;
    paidBy: string;
    description: string;
    status?: string;
    receiptUrl?: string | null;
  }>;
  images: {
    categoryDonut: string;
    monthlyTrends: string;
    paymentBars: string;
    sourceDistribution: string;
    drilldowns: Array<{ category: string; image: string }>;
  };
}

const inr = (num: number): string => {
  return `Rs.${Math.round(num).toLocaleString('en-IN')}`;
};

const fmtDate = (dateStr: string): string => {
  try {
    return format(new Date(dateStr), 'dd-MM-yyyy');
  } catch {
    return dateStr;
  }
};

function drawHeaderFooter(
  doc: jsPDF,
  meta: { reportType: string; range: string }
) {
  const totalPages = doc.internal.pages.length - 1;
  const pageWidth = doc.internal.pageSize.getWidth();
  const pageHeight = doc.internal.pageSize.getHeight();

  for (let i = 1; i <= totalPages; i++) {
    doc.setPage(i);
    
    doc.setFontSize(16);
    doc.setFont('helvetica', 'bold');
    doc.text('Expense Report', 18, 40);

    doc.setFont('helvetica', 'normal');
    doc.setFontSize(10);
    doc.text(`Report Type: ${meta.reportType}`, pageWidth - 18, 36, { align: 'right' });
    doc.text(`Range: ${meta.range}`, pageWidth - 18, 48, { align: 'right' });

    doc.setFontSize(9);
    doc.setTextColor(128, 128, 128);
    doc.text('Generated by Maharani Dairy', 18, pageHeight - 10);
    doc.text(`Page ${i} / ${totalPages}`, pageWidth - 18, pageHeight - 10, { align: 'right' });
    doc.setTextColor(0, 0, 0);
  }
}

export const generateExpenseReportPDF = (data: PdfData): jsPDF => {
  const doc = new jsPDF('p', 'pt', 'a4');
  ensurePdfFont(doc);
  
  const pageWidth = doc.internal.pageSize.getWidth();
  const margin = 18;
  let yPos = 80;

  const cardWidth = (pageWidth - 3 * margin) / 2;
  const cardHeight = 60;

  doc.setDrawColor(220, 220, 220);
  doc.setLineWidth(0.5);
  doc.rect(margin, yPos, cardWidth, cardHeight);
  doc.rect(margin + cardWidth + margin / 2, yPos, cardWidth, cardHeight);

  doc.setFontSize(11);
  doc.setTextColor(100, 100, 100);
  doc.text('Total Expenses', margin + 8, yPos + 20);
  doc.text('Average / Month', margin + cardWidth + margin / 2 + 8, yPos + 20);

  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0);
  doc.text(inr(data.totalExpenses), margin + 8, yPos + 45);
  doc.text(inr(data.averagePerMonth), margin + cardWidth + margin / 2 + 8, yPos + 45);

  yPos += cardHeight + 8;
  doc.setFont('helvetica', 'normal');
  doc.rect(margin, yPos, cardWidth, cardHeight);
  doc.rect(margin + cardWidth + margin / 2, yPos, cardWidth, cardHeight);

  doc.setFontSize(11);
  doc.setTextColor(100, 100, 100);
  doc.text('Records', margin + 8, yPos + 20);
  doc.text('Report Type', margin + cardWidth + margin / 2 + 8, yPos + 20);

  doc.setFontSize(16);
  doc.setFont('helvetica', 'bold');
  doc.setTextColor(0, 0, 0);
  doc.text(String(data.recordsCount), margin + 8, yPos + 45);
  doc.text(data.reportType === 'accrual' ? 'Accrual' : 'Cashflow', margin + cardWidth + margin / 2 + 8, yPos + 45);

  yPos += cardHeight + 25;
  doc.setFont('helvetica', 'bold');
  doc.setFontSize(14);
  doc.text('Category-wise Distribution', margin, yPos);
  yPos += 10;

  if (data.images.categoryDonut) {
    const imgWidth = pageWidth - 2 * margin;
    const imgHeight = 280;
    doc.addImage(data.images.categoryDonut, 'PNG', margin, yPos, imgWidth, imgHeight);
    yPos += imgHeight + 20;
  }

  doc.addPage();
  yPos = 70;

  doc.setFont('helvetica', 'bold');
  doc.setFontSize(14);
  doc.text('Monthly Expense Trends', margin, yPos);
  yPos += 10;

  if (data.images.monthlyTrends) {
    const imgWidth = pageWidth - 2 * margin;
    const imgHeight = 200;
    doc.addImage(data.images.monthlyTrends, 'PNG', margin, yPos, imgWidth, imgHeight);
    yPos += imgHeight + 25;
  }

  doc.setFont('helvetica', 'bold');
  doc.setFontSize(14);
  doc.text('Payment Methods Breakdown', margin, yPos);
  yPos += 10;

  if (data.images.paymentBars) {
    const imgWidth = pageWidth - 2 * margin;
    const imgHeight = 200;
    doc.addImage(data.images.paymentBars, 'PNG', margin, yPos, imgWidth, imgHeight);
  }

  // Source-wise breakdown with categories
  doc.addPage();
  yPos = 70;

  doc.setFont('helvetica', 'bold');
  doc.setFontSize(14);
  doc.text('Source-wise Category Breakdown', margin, yPos);
  yPos += 20;

  // List each source with its categories
  if (data.sourceBreakdown && data.sourceBreakdown.length > 0) {
    data.sourceBreakdown.forEach((source) => {
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(12);
      doc.setTextColor(41, 128, 185);
      doc.text(`Source: ${source.name}`, margin, yPos);
      doc.setTextColor(0, 0, 0);
      yPos += 15;

      // List categories under this source
      if (source.categories && source.categories.length > 0) {
        doc.setFont('helvetica', 'normal');
        doc.setFontSize(11);
        source.categories.forEach((cat) => {
          doc.text(`${cat.name} - ${inr(cat.amount)}`, margin + 15, yPos);
          yPos += 12;
        });
      }

      yPos += 8; // Extra spacing between sources

      // Check if we need a new page
      if (yPos > pageWidth - 100) {
        doc.addPage();
        yPos = 70;
      }
    });

    yPos += 15;

    // Add source distribution chart if available
    if (data.images.sourceDistribution) {
      doc.setFont('helvetica', 'bold');
      doc.setFontSize(14);
      doc.text('Source Distribution', margin, yPos);
      yPos += 10;

      const imgWidth = pageWidth - 2 * margin;
      const imgHeight = 280;
      
      // Check if we need a new page for the chart
      if (yPos + imgHeight > pageWidth - 50) {
        doc.addPage();
        yPos = 70;
      }
      
      doc.addImage(data.images.sourceDistribution, 'PNG', margin, yPos, imgWidth, imgHeight);
    }
  }

  doc.addPage();
  yPos = 70;

  doc.setFont('helvetica', 'bold');
  doc.setFontSize(14);
  doc.text('Transaction Details', margin, yPos);
  yPos += 5;

  if (data.transactions && data.transactions.length > 0) {
    const head = [[
      'Date', 'Description', 'Category', 'Source', 'Vendor',
      'Method', 'Paid By', 'Amount', 'Status', 'Receipt'
    ]];

    const body = data.transactions.map(txn => [
      fmtDate(txn.date),
      txn.description || '',
      txn.category,
      txn.source,
      txn.vendor,
      txn.paymentMethod,
      txn.paidBy,
      txn.amount,
      txn.status || '',
      txn.receiptUrl ? 'Open' : '-'
    ]);

    const receiptUrls = data.transactions.map(txn => txn.receiptUrl || null);

    autoTable(doc, {
      startY: yPos,
      head,
      body,
      foot: [[
        { content: 'TOTAL', colSpan: 7, styles: { halign: 'right', fontStyle: 'bold' } },
        { content: inr(data.totalExpenses), styles: { fontStyle: 'bold', halign: 'right' } },
        '',
        ''
      ]],
      theme: 'grid',
      headStyles: {
        fillColor: [240, 240, 240],
        textColor: [0, 0, 0],
        fontStyle: 'bold',
        ...getTableFont(),
      },
      styles: {
        ...getTableFont(),
        cellPadding: 3,
        overflow: 'linebreak',
        cellWidth: 'wrap',
      },
      columnStyles: {
        0: { cellWidth: 55 },
        1: { cellWidth: 80 },
        2: { cellWidth: 60 },
        3: { cellWidth: 55 },
        4: { cellWidth: 55 },
        5: { cellWidth: 50 },
        6: { cellWidth: 50 },
        7: { cellWidth: 55, halign: 'right' },
        8: { cellWidth: 45 },
        9: { cellWidth: 40, halign: 'center' },
      },
      alternateRowStyles: {
        fillColor: [248, 248, 248],
      },
      didParseCell: (hookData) => {
        if (hookData.section === 'body' && hookData.column.index === 7) {
          const amount = Number(hookData.cell.raw ?? 0);
          hookData.cell.text = [inr(amount)];
          hookData.cell.styles.halign = 'right';
        }
        
        if (hookData.section === 'body' && hookData.column.index === 9) {
          const url = receiptUrls[hookData.row.index];
          if (url) {
            hookData.cell.styles.textColor = [33, 150, 243];
            hookData.cell.styles.fontStyle = 'normal';
          }
        }
      },
      didDrawCell: (hookData) => {
        if (hookData.section === 'body' && hookData.column.index === 9) {
          const url = receiptUrls[hookData.row.index];
          if (url) {
            const { x, y, width, height } = hookData.cell;
            doc.link(x, y, width, height, { url });
            
            doc.setDrawColor(33, 150, 243);
            doc.setLineWidth(0.5);
            const textWidth = doc.getTextWidth('Open');
            const centerX = x + (width - textWidth) / 2;
            doc.line(centerX, y + height - 4, centerX + textWidth, y + height - 4);
          }
        }
      },
      margin: { top: 50, bottom: 25, left: margin, right: margin },
    });
  } else {
    doc.setFont('helvetica', 'normal');
    doc.setFontSize(11);
    doc.text('No transactions found for the selected period.', margin, yPos + 20);
  }

  const reportTypeName = data.reportType === 'accrual' ? 'Accrual' : 'Cashflow';
  const range = `${fmtDate(data.fromDate)} to ${fmtDate(data.toDate)}`;
  drawHeaderFooter(doc, { reportType: reportTypeName, range });

  return doc;
};

export const generateExpenseWhatsAppMessage = (data: {
  fromDate: string;
  toDate: string;
  reportType: 'accrual' | 'cashflow';
  totalExpenses: number;
  averagePerMonth: number;
  recordsCount: number;
  categoryBreakdown: Array<{ name: string; amount: number; percentage: number }>;
  sourceBreakdown: Array<{ name: string; amount: number }>;
}): string => {
  const reportTypeName = data.reportType === 'accrual' ? 'Accrual' : 'Cashflow';
  
  let message = `*Expenses - ${reportTypeName}*\n`;
  message += `Range: ${fmtDate(data.fromDate)} to ${fmtDate(data.toDate)}\n`;
  message += `Total: ${inr(data.totalExpenses)} | Avg/Month: ${inr(data.averagePerMonth)} | Records: ${data.recordsCount}\n\n`;
  
  message += `*Top Categories:*\n`;
  const topCategories = data.categoryBreakdown.slice(0, 3);
  topCategories.forEach((cat, idx) => {
    message += `${idx + 1}) ${cat.name} - ${cat.percentage.toFixed(1)}% (${inr(cat.amount)})\n`;
  });
  
  if (data.sourceBreakdown.length > 0) {
    message += `\n*Top Sources:*\n`;
    const topSources = data.sourceBreakdown.slice(0, 3);
    topSources.forEach((src) => {
      message += `${src.name} - ${inr(src.amount)}\n`;
    });
  }
  
  return message;
};
